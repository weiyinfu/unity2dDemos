//Shader 文件在选择面板以树状结构组织的
Shader "Hidden/NewImageEffectShader"
{
    //这个申明程序中所需要的变量信息
    Properties
    {
        //_MainTex 变量名 ； “Texture” 在Inspector面板上显示的名称 ； 2D 指变量类型
        // "white" 变量默认值
        _MainTex ("Texture", 2D) = "white" {}
    }
    // Shader 语法块，一个Shader程序至少有一个SubShader，系统在渲染时会依次调用，
    // 直到找到匹配的SubShader，否则使用最后默认指定的Shader
    SubShader
    {
        // Cull Off：关闭阴影剔除 、  ZWrite ： 要将像素的深度写入深度缓存中
        // Test Always：将当前深度值写到颜色缓冲中
        Cull Off ZWrite Off ZTest Always
        //渲染通道，固定写法
        Pass
        {
            //Shader 代码段开始
            CGPROGRAM
            //指定顶点Shader入口
            #pragma vertex vert
            //指定片段程序入口
            #pragma fragment frag
            //引用Unity内置的一些定义
            #include "UnityCG.cginc"
            //自定义结构体
            struct appdata
            {
                //float4 4维向量、POSITION 语义，相当于告诉渲染引擎，这个变量是代表什么含义
                float4 vertex : POSITION;
                //TEXCOORD0 纹理语义
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };
            //Vertex Shader 对应的入口
            v2f vert (appdata v)    //appdata v 作为参数，渲染引擎会把对应语义的信息传递进来，此处会传递顶点的位置信息和纹理信息
            {
                v2f o;
                //传递进来的顶点坐标是模型坐标系中的坐标值，需要经过矩阵转换车成屏幕坐标
                o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
                o.uv = v.uv;
                //将计算后的结果输出给渲染引擎，底层会根据具体的语义去做对应的处理
                return o;
            }
            //在Properties 中定义的变量需要在此申明一下才能在程序中使用
            sampler2D _MainTex;

            //fragment Shader 对应的入口
            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv);
                // just invert the colors
                col = 1 - col;
                return col;
            }
            ENDCG
        }
    }
    //当上述的SubShader无法匹配硬件环境时，会调这个指定的默认Shader
    Fallback "Mobile/VertexLit"
}